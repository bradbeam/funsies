'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':6,'href':'/funsies/docs/quickstart/postgres/','title':"Postgres",'section':"Quickstart",'content':"Postgres #  The purpose of this guide is to get you started with Red Sky Ops and Postgres. We will cover\n Deploying a postgres to Kubernetes Exploring the postgres experiment Running trials to determine the best configuration  Prerequisites #   Kubernetes cluster ( minikube cluster will be sufficient ) kubectl properly configured for your cluster redskyctl kustomize v3.1.0+  Initialize the Red Sky Ops Manager #  Log in to your Red Sky Ops account:\n$ redskyctl login Opening your default browser to visit: https://auth.carbonrelay.io/authorize?audience=https%3A%2F%2Fapi.carbonrelay.io%2Fv1%2F\u0026amp;client_id=QJHVshlUUQJ40Rml7CUJDJVmRLHhE04Y\u0026amp;code_challenge=5JstkywCbFCwSC4qarX8WC_Uq_6ktsn1g28aY7ZtTDs\u0026amp;code_challenge_method=S256\u0026amp;redirect_uri=http%3A%2F%2F127.0.0.1%3A8085%2F\u0026amp;response_type=code\u0026amp;scope=register%3Aclients+offline_access\u0026amp;state=S-t7HVXShlUUSel6KAWMIQ You are now logged in. Initialize the manager in your cluster:\n$ redskyctl init namespace/redsky-system created customresourcedefinition.apiextensions.k8s.io/experiments.redskyops.dev created customresourcedefinition.apiextensions.k8s.io/trials.redskyops.dev created clusterrole.rbac.authorization.k8s.io/redsky-manager-role created clusterrolebinding.rbac.authorization.k8s.io/redsky-manager-rolebinding created deployment.apps/redsky-controller-manager created clusterrole.rbac.authorization.k8s.io/redsky-patching-role created clusterrolebinding.rbac.authorization.k8s.io/redsky-patching-rolebinding created secret/redsky-manager created Verify manager is running:\n$ kubectl wait --for condition=Ready=true po -n redsky-system -l app.kubernetes.io/name=redskyops pod/redsky-controller-manager-5fb9f4cd4d-g2rn5 condition met Create the Experiment #  We\u0026rsquo;ll use the Postgres example here. This example will deploy the postgres application and configure an experiment to tune the memory and cpu limits for postgres. This is done by running trials using pgbench to generate load against our postgres instance. Each trial will test a different set of parameters provided by the Red Sky Ops ML servers. The effectiveness of each trial is gauged by the metrics, in this case we contrast cost versus duration.\nDeploy the postgres application and experiment using the following:\n$ kustomize build github.com/redskyops/redskyops-recipes/postgres | kubectl apply -f - # TODO show sample output You can monitor the progress using kubectl:\n$ watch -d kubectl get trials -o wide # TODO show sample output After the trial is complete, you will be able to view the parameters and the metrics generated from the trial. The results can be reviewed as a visualization by running the following command:\n$ redskyctl results Removing the Experiment #  To clean up the data from your experiment, simply delete the experiment. The delete will cascade to the associated trials and other Kubernetes objects:\n$ kubectl delete experiment postgres-example Congratulations! You just ran your first experiment. You can move on to a more advanced tutorial or browse the rest of the documentation to learn more about the Red Sky Ops Kubernetes experimentation product.\n"});})();